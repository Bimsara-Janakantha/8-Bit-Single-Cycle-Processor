/*
Module        : Data Cache 
Author        : Isuru Nawinne, Kisaru Liyanage
Date          : 25/05/2020
Modified by   : E/20/148, E/20/157
Last Modified : 12/06/2024

Description	:
This file presents a skeleton implementation of the cache controller using a Finite State Machine model. 
*/

module dcache (
    // Ports connected to CPU
    CLK, RESET, READ, WRITE, ADDRESS, WRITEDATA, READDATA, BUSYWAIT, 

    // Ports connected to Data Memory
    mem_read, mem_write, mem_writedata, mem_address, mem_readdata, mem_busywait
    );

    // Input and output port declaration
    input CLK, RESET, READ, WRITE, mem_busywait;
    input [7:0] WRITEDATA, ADDRESS;
    input [31:0] mem_readdata;

    output reg BUSYWAIT, mem_read, mem_write;
    output reg [5:0] mem_address;
    output reg [7:0] READDATA;
    output reg [31:0] mem_writedata;

    // Local nets declareation
    reg[2:0] tag;            // reg for tag
    reg[2:0] index;          // reg for index
    reg[1:0] offset;         // reg for offset

    reg hit;                 // check validity of the cache data
    wire dirty;              // check consistancy of the write data
    reg validBitArray[7:0];  // Valid bit array for cache 8 blocks
    reg dirtyBitArray[7:0];  // Dirty bit array for cache 8 blocks
    reg [2:0] tagArray[7:0];

    reg [31:0] cache_memory[7:0]; // Cache memory block array

    integer i;


    // Initial state
    initial begin      
      for(i=0; i<8; i = i+1) begin
        validBitArray[i] <= 1'b0;
        dirtyBitArray[i] <= 1'b0;
        tagArray[i]      <= 3'b000;
      end
    end

    // Reset states
    always @ (posedge CLK) begin      
      if(RESET == 1'b1) begin
        for(i=0; i<8; i = i+1) begin
        validBitArray[i] <= 1'b0;
        dirtyBitArray[i] <= 1'b0;
        tagArray[i]      <= 3'b000;
        end
      end
    end

    // Handling busywait signal
    always @ (READ, WRITE) begin
      BUSYWAIT = (READ || WRITE) ? 1 : 0; // If read or write signal came busywait = 1
    end
    
    // separating cpu address into tag, index, offset
    always @ (ADDRESS) begin
      tag       <= #1 ADDRESS[7:5];
      index     <= #1 ADDRESS[4:2];
      offset    <= #1 ADDRESS[1:0];
      $monitor("Address: %b\ntag: %b \t\tindex: %b \t\toffset: %b",ADDRESS, tag, index, offset);
    end

    // Check consistancy of the data to read
    assign #1 dirty = dirtyBitArray[index];
    
    /* 
        Reading/ writing memory
        1). Hit ::  Valid bit = 1 && Tag is matching        => hit = 1
        2). Miss::  Valid bit = 0 || Tag is not matching    => hit = 0
    */

    // Cheching cache for hitting
    always @(index, tag) begin
      #0.9
      if(validBitArray[index] && (tag == tagArray[index])) begin
        hit = 1; // READ_HIT
      end
      else begin
        hit = 0; // READ_MISS
      end
    end

    always @(*) begin
        if(hit) begin // If the request is a hit
            // READ HIT
            if(READ && !(WRITE)) begin
                case (offset) 
                    0: READDATA = cache_memory[index][7:0];
                    1: READDATA = cache_memory[index][15:8];
                    2: READDATA = cache_memory[index][23:16];
                    3: READDATA = cache_memory[index][31:24];
                endcase
                
            end
            
            // WRITE HIT (need to modify to sync with clk)
            else if(!(READ) && WRITE) begin
                case (offset) 
                    0: cache_memory[index][7:0]   = #1 WRITEDATA;
                    1: cache_memory[index][15:8]  = #1 WRITEDATA;
                    2: cache_memory[index][23:16] = #1 WRITEDATA;
                    3: cache_memory[index][31:24] = #1 WRITEDATA;
                endcase
                dirtyBitArray[index] = 1;
                validBitArray[index] = 1;
            end
            BUSYWAIT = 0;
        end
        $monitor("READDATA:: %b", READDATA);
    end


    /*
    Combinational part for indexing, tag comparison for hit deciding, etc.
    */
    

    /* Cache Controller FSM Start */

    parameter IDLE = 3'b000, MEM_READ = 3'b001, MEM_WRITE = 3'b010;
    reg [2:0] state, next_state;

    // combinational next state logic
    always @(*) begin
        case (state)
            IDLE:
                if ((READ || WRITE) && !dirty && !hit)  
                    next_state = MEM_READ;
                else if ((READ || WRITE) && dirty && !hit)
                    next_state = MEM_WRITE;
                else
                    next_state = IDLE;
            
            MEM_READ:
                if (!mem_busywait)
                    next_state = IDLE;
                else    
                    next_state = MEM_READ;

            MEM_WRITE:
                if (!mem_busywait)
                    next_state = MEM_READ;
                else    
                    next_state = MEM_WRITE;
        endcase
    end

    // combinational output logic
    always @(*)
    begin
        case(state)
            IDLE:
            begin
                mem_read = 0;
                mem_write = 0;
                mem_address = 8'dx;
                mem_writedata = 8'dx;
                BUSYWAIT = 0;
            end
         
            MEM_READ: 
            begin
                mem_read = 1;
                mem_write = 0;
                mem_address = {tag, index};
                mem_writedata = 32'dx;
                BUSYWAIT = 1;
                if (!mem_busywait) begin
                  cache_memory[index] = mem_readdata;
                  validBitArray[index] = 1;
                  tagArray[index] = tag;
                end
            end

            // Later
            MEM_WRITE: 
            begin
                mem_read = 0;
                mem_write = 1;
                mem_address = {tag, index};
                mem_writedata = 32'dx;
                BUSYWAIT = 1;
            end
            
        endcase
    end

    // sequential logic for state transitioning 
    always @(posedge CLK, RESET)
    begin
        if(RESET)
            state = IDLE;
        else
            state = next_state;
    end

    /* Cache Controller FSM End */
endmodule