$date
	Thu Jun 13 11:53:54 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$scope module mycpu $end
$var wire 1 ! CLK $end
$var wire 32 " INSTRUCTION [31:0] $end
$var wire 1 # RESET $end
$var wire 8 $ twos_Complemet [7:0] $end
$var wire 8 % subMuxOut [7:0] $end
$var wire 8 & immMuxOut [7:0] $end
$var wire 8 ' REGOUT2 [7:0] $end
$var wire 8 ( REGOUT1 [7:0] $end
$var wire 8 ) ALURESULT [7:0] $end
$var reg 3 * ALUOP [2:0] $end
$var reg 8 + IMMEDIATE [7:0] $end
$var reg 8 , OPCODE [7:0] $end
$var reg 32 - PC [31:0] $end
$var reg 3 . READREG1 [2:0] $end
$var reg 3 / READREG2 [2:0] $end
$var reg 1 0 WRITEENABLE $end
$var reg 3 1 WRITEREG [2:0] $end
$var reg 1 2 immMuxSelect $end
$var reg 1 3 subMuxSelect $end
$var reg 32 4 tempPC [31:0] $end
$scope module aluUnit $end
$var wire 3 5 SELECT [2:0] $end
$var wire 8 6 orOut [7:0] $end
$var wire 8 7 fwdOut [7:0] $end
$var wire 8 8 andOut [7:0] $end
$var wire 8 9 addOut [7:0] $end
$var wire 8 : DATA2 [7:0] $end
$var wire 8 ; DATA1 [7:0] $end
$var reg 8 < RESULT [7:0] $end
$scope module addUnit $end
$var wire 8 = DATA2 [7:0] $end
$var wire 8 > DATA1 [7:0] $end
$var reg 8 ? RESULT [7:0] $end
$upscope $end
$scope module andUnit $end
$var wire 8 @ RESULT [7:0] $end
$var wire 8 A DATA2 [7:0] $end
$var wire 8 B DATA1 [7:0] $end
$upscope $end
$scope module fwdUnit $end
$var wire 8 C RESULT [7:0] $end
$var wire 8 D DATA2 [7:0] $end
$upscope $end
$scope module orUnit $end
$var wire 8 E RESULT [7:0] $end
$var wire 8 F DATA2 [7:0] $end
$var wire 8 G DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module complementUnit $end
$var wire 8 H RESULT [7:0] $end
$var wire 8 I DATA2 [7:0] $end
$upscope $end
$scope module immediateMux $end
$var wire 8 J IN1 [7:0] $end
$var wire 1 2 SELECT $end
$var wire 8 K IN2 [7:0] $end
$var reg 8 L OUT [7:0] $end
$upscope $end
$scope module regUnit $end
$var wire 1 ! CLK $end
$var wire 8 M IN [7:0] $end
$var wire 3 N INADDRESS [2:0] $end
$var wire 3 O OUT1ADDRESS [2:0] $end
$var wire 3 P OUT2ADDRESS [2:0] $end
$var wire 1 # RESET $end
$var wire 1 0 WRITE $end
$var reg 8 Q OUT1 [7:0] $end
$var reg 8 R OUT2 [7:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module subMux $end
$var wire 8 T IN1 [7:0] $end
$var wire 8 U IN2 [7:0] $end
$var wire 1 3 SELECT $end
$var reg 8 V OUT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 W \REGISTER[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 X \REGISTER[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 Y \REGISTER[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 Z \REGISTER[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 [ \REGISTER[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 \ \REGISTER[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 ] \REGISTER[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module regUnit $end
$var reg 8 ^ \REGISTER[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
x2
bx 1
x0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
1#
bx "
0!
$end
#4
1!
#5
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b1000 S
b0 4
b0 -
#6
b100 4
0#
#7
b1001 +
b1001 J
b1 /
b1 P
b0 .
b0 O
b0 1
b0 N
b0 ,
b1001 "
#8
b1001 &
b1001 :
b1001 =
b1001 A
b1001 D
b1001 F
b1001 L
10
b0 *
b0 5
02
0!
#9
b1001 )
b1001 <
b1001 M
bx1xx1 6
bx1xx1 E
b0x00x 8
b0x00x @
b1001 7
b1001 C
b0 '
b0 I
b0 R
b0 T
b0 (
b0 ;
b0 >
b0 B
b0 G
b0 Q
#10
b0 $
b0 H
b0 U
b1001 6
b1001 E
b0 8
b0 @
b1001 9
b1001 ?
#12
1!
#13
b100 -
b1001 W
#14
b1000 4
00
#15
b1 &
b1 :
b1 =
b1 A
b1 D
b1 F
b1 L
b1 +
b1 J
b1 1
b1 N
b10000000000000001 "
#16
10
b1 )
b1 <
b1 M
b1 6
b1 E
b1 7
b1 C
0!
#17
b1 9
b1 ?
#20
1!
#21
b1 X
b1000 -
#22
b1100 4
00
#23
b0 &
b0 :
b0 =
b0 A
b0 D
b0 F
b0 L
b0 +
b0 J
b0 /
b0 P
b1 .
b1 O
b110 1
b110 N
b10 ,
b10000001100000000100000000 "
#24
b0 %
b0 K
b0 V
10
b1 *
b1 5
12
03
b1 )
b1 <
b1 M
b0 6
b0 E
b0 7
b0 C
0!
#25
b1001 &
b1001 :
b1001 =
b1001 A
b1001 D
b1001 F
b1001 L
b1001 %
b1001 K
b1001 V
b1001 '
b1001 I
b1001 R
b1001 T
b1 (
b1 ;
b1 >
b1 B
b1 G
b1 Q
#26
b1 8
b1 @
b1001 7
b1001 C
b11110111 $
b11110111 H
b11110111 U
b1001 6
b1001 E
#27
b1010 )
b1010 <
b1010 M
b1010 9
b1010 ?
#28
1!
#29
b1100 -
b1010 ]
#30
b10000 4
00
#31
b110 +
b110 J
b110 /
b110 P
b0 .
b0 O
b0 1
b0 N
b1 ,
b1000000000000000000000110 "
#32
10
b1001 )
b1001 <
b1001 M
b0 *
b0 5
0!
#33
b1010 &
b1010 :
b1010 =
b1010 A
b1010 D
b1010 F
b1010 L
b1010 %
b1010 K
b1010 V
b1010 '
b1010 I
b1010 R
b1010 T
b1001 (
b1001 ;
b1001 >
b1001 B
b1001 G
b1001 Q
#34
b1010 )
b1010 <
b1010 M
b1011 6
b1011 E
b1010 7
b1010 C
b11110110 $
b11110110 H
b11110110 U
b1000 8
b1000 @
#35
b10011 9
b10011 ?
#36
1!
#37
b1010 W
b10000 -
#38
b10100 4
00
#39
b1 +
b1 J
b1 /
b1 P
b1 1
b1 N
b0 ,
b10000000000000001 "
#40
b1 &
b1 :
b1 =
b1 A
b1 D
b1 F
b1 L
10
02
0!
#41
b1 )
b1 <
b1 M
b1 %
b1 K
b1 V
b1001 6
b1001 E
b1 8
b1 @
b1 7
b1 C
b1 '
b1 I
b1 R
b1 T
b1010 (
b1010 ;
b1010 >
b1010 B
b1010 G
b1010 Q
#42
b11111111 $
b11111111 H
b11111111 U
b1011 6
b1011 E
b0 8
b0 @
b1011 9
b1011 ?
#44
1!
#45
b10100 -
b1 X
#46
b11000 4
00
#47
b10 .
b10 O
b10 1
b10 N
b10 ,
b10000000100000001000000001 "
#48
b1011 )
b1011 <
b1011 M
10
b1 *
b1 5
12
0!
#49
b0 (
b0 ;
b0 >
b0 B
b0 G
b0 Q
#50
b1 6
b1 E
#51
b1 )
b1 <
b1 M
b1 9
b1 ?
#52
1!
#53
b1 Y
b11000 -
#54
b11100 4
00
#55
bx +
bx J
bx /
bx P
bx .
bx O
bx 1
bx N
bx ,
bx "
#56
0!
#57
bx &
bx :
bx =
bx A
bx D
bx F
bx L
bx %
bx K
bx V
bx '
bx I
bx R
bx T
bx (
bx ;
bx >
bx B
bx G
bx Q
#58
bx 7
bx C
bx $
bx H
bx U
bx 6
bx E
bx 8
bx @
#59
bx )
bx <
bx M
bx 9
bx ?
#60
1!
#61
b11100 -
#62
b100000 4
#64
0!
#68
1!
#69
b100000 -
#70
b100100 4
#72
0!
#76
1!
#77
b100100 -
#78
b101000 4
#80
0!
#84
1!
#85
b101000 -
#86
b101100 4
#88
0!
#92
1!
#93
b101100 -
#94
b110000 4
#96
0!
#100
1!
#101
b110000 -
#102
b110100 4
#104
0!
#106
